#
# Specifies all systems calls. Must be in format:
# <number> { prototype }
#
0 { void exit(int exitcode); }
1 { Result read(int fd, void* buf, size_t len); }
2 { Result write(int fd, const void* buf, size_t len); }
3 { Result open(const char* path, int flags, int mode); }
4 { Result close(int fd); }
5 { Result unlink(const char* path); }
6 { Result seek(int fd, off_t* offset, int whence); }
7 { Result clone(int flags); }
8 { Result waitpid(pid_t pid, int* stat_loc, int options); }
9 { Result execve(const char* path, const char** argv, const char** envp); }
10 { Result vmop(struct VMOP_OPTIONS* opts); }
11 { Result dup(int fd); }
12 { Result rename(const char* oldpath, const char* newpath); }
13 { Result stat(const char* path, struct stat* buf); }
14 { Result chdir(const char* path); }
15 { Result fstat(int index, struct stat* buf); }
16 { Result fchdir(int index); }
17 { Result fcntl(int index, int cmd, const void* in, void* out); }
18 { Result link(const char* oldpath, const char* newpath); }
19 { Result utime(const char* path, const struct utimbuf* times); }
20 { Result clock_settime(clockid_t id, const struct timespec* tp); }
21 { Result clock_gettime(clockid_t id, struct timespec* tp); }
22 { Result clock_getres(clockid_t id, struct timespec* res); }
23 { Result readlink(const char* path, char* buffer, size_t bufsize); }
24 { Result lstat(const char* path, struct stat* buf); }
25 { Result getcwd(char* buf, size_t buflen); }
26 { Result sigaction(int sig, const struct sigaction* act, struct sigaction* oact); }
27 { Result sigprocmask(int how, const sigset_t* set, sigset_t* oset); }
28 { Result sigsuspend(const sigset_t* sigmask); }
29 { Result kill(pid_t pid, int sig); }
30 { Result sigreturn(); }
31 { Result ioctl(int fd, unsigned long op, void* arg1, void* arg2, void* arg3); }
32 { Result getpgrp(); }
33 { Result setpgid(pid_t pid, pid_t pgid); }
34 { Result setsid(); }
35 { Result dup2(int fd, int newindex); }
36 { Result mount(const char* type, const char* source, const char* dir, int flags); }
37 { Result unmount(const char* dir, int flags); }
38 { Result statfs(const char* path, struct statfs* buf); }
39 { Result fstatfs(int fd, struct statfs* buf); }
40 { Result nanosleep(const struct timespec* rqtp, struct timespec* rmtp); }
41 { Result getsid(pid_t pid); }
42 { Result getuid(); }
43 { Result geteuid(); }
44 { Result getgid(); }
45 { Result getegid(); }
46 { Result getpid(); }
47 { Result getppid(); }
48 { Result symlink(const char* oldpath, const char* newpath); }
49 { Result reboot(int how); }
50 { Result socket(int domain, int type, int protocol); }
51 { Result accept(int socket, struct sockaddr* address, socklen_t* address_len); }
52 { Result bind(int socket, const struct sockaddr* address, socklen_t address_len); }
53 { Result connect(int socket, const struct sockaddr* address, socklen_t address_len); }
54 { Result listen(int socket, int backlog); }
55 { Result send(int socket, const void* buffer, size_t length, int flags); }
56 { Result select(int nfds, fd_set* readfds, fd_set* writefds, fd_set* errorfds, struct timeval* timeout); }
57 { Result shmat(int shmid, const void* shmaddr, int shmflg, void** out); }
58 { Result shmctl(int shmid, int cmd, struct shmid_ds* buf); }
59 { Result shmdt(const void* shmaddr); }
60 { Result shmget(key_t key, size_t size, int shmflg); }
61 { Result openpt(int flags); }
